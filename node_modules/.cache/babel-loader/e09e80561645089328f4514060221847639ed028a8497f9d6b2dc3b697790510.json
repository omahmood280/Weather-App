{"ast":null,"code":"var _jsxFileName = \"/Users/owaismahmood/Documents/final-react/weather/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\nimport WeatherResult from './WeatherResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [state, setState] = useState('');\n  const [result, setResult] = useState('');\n  const getCountryCode = async country => {\n    try {\n      const response = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n      if (!response.ok) {\n        throw new Error(\"Country Name not found\");\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"ERROR: \" + error.message);\n      setResult(\"Country name not found\");\n    }\n  };\n  const loadWeather = async () => {\n    const apikey = 'd5d0c58cec7185d2e06bf2f5b779e6be';\n    let countrycode = '';\n    if (country !== '') {\n      const countryData = await getCountryCode(country);\n      countrycode = countryData[0].cca2;\n    }\n    fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${countrycode}&appid=${apikey}`)\n    //this gets the latitude and longitude which we need to get the temprature for the next api call\n    .then(response => response.json()).then(data => {\n      if (data[0].name.toLowerCase() != city.toLowerCase()) {\n        throw new Error(\"City name not found\"); //ensure exact city name match as sometimes api returns close matches\n      }\n\n      //result variables\n      responsecity = data[0].name;\n      responsestate = data[0].state;\n      responsecountry = data[0].country;\n      console.log(data);\n      lat = data[0].lat;\n      lon = data[0].lon;\n      return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apikey}&units=metric`);\n      //now we can get the temprature\n    }).then(response => response.json()).then(data1 => {\n      if (responsestate) {\n        document.getElementById('result').innerHTML = String(data1.main.temp) + \"&deg;C: \" + city.toUpperCase() + \", \" + responsestate.toUpperCase();\n      } else {\n        document.getElementById('result').innerHTML = String(data1.main.temp) + \"&deg;C: \" + city.toUpperCase() + \", \" + country.toUpperCase();\n      }\n    }).catch(error => {\n      console.log(\"Error: \" + error.message);\n      document.getElementById('result').innerHTML = \"Incorrect entry\";\n    });\n  };\n  const onCityChange = () => {\n    setCity();\n  };\n  const onCountryChange = value => {\n    setCountry(value);\n  };\n  const onStateChange = value => {\n    setState(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(InputForm, {\n      city: city,\n      country: country,\n      state: state,\n      onCityChange: onCityChange,\n      onCountryChange: onCountryChange,\n      onStateChange: onStateChange,\n      onSubmit: loadWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherResult, {\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LGPqcJalRVl4oZbtHnaBj0dDE7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputForm","WeatherResult","jsxDEV","_jsxDEV","App","_s","city","setCity","country","setCountry","state","setState","result","setResult","getCountryCode","response","fetch","ok","Error","data","json","error","console","message","loadWeather","apikey","countrycode","countryData","cca2","then","name","toLowerCase","responsecity","responsestate","responsecountry","log","lat","lon","data1","document","getElementById","innerHTML","String","main","temp","toUpperCase","catch","onCityChange","onCountryChange","value","onStateChange","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owaismahmood/Documents/final-react/weather/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\nimport WeatherResult from './WeatherResult';\n\nconst App = () => {\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [state, setState] = useState('');\n  const [result, setResult] = useState('');\n\n\n  const getCountryCode = async (country) => {\n    try {\n      const response = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n      if (!response.ok) {\n        throw new Error(\"Country Name not found\");\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"ERROR: \" + error.message);\n      setResult(\"Country name not found\");\n    }\n  };\n\n  const loadWeather = async () => {\n    const apikey = 'd5d0c58cec7185d2e06bf2f5b779e6be';\n    let countrycode = '';\n\n    if (country !== '') {\n      const countryData = await getCountryCode(country);\n      countrycode = countryData[0].cca2;\n    }\n\n\n      fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${countrycode}&appid=${apikey}`)\n      //this gets the latitude and longitude which we need to get the temprature for the next api call\n      .then(response => \n     response.json()\n      )\n      .then(data => {\n         if ((data[0].name).toLowerCase() != city.toLowerCase()){ \n             throw new Error(\"City name not found\"); //ensure exact city name match as sometimes api returns close matches\n         }\n      \n         //result variables\n         responsecity = data[0].name\n         responsestate = data[0].state\n         responsecountry = data[0].country\n     \n         console.log(data)\n     \n         \n         lat = data[0].lat\n         lon = data[0].lon\n      return fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apikey}&units=metric`)\n       //now we can get the temprature\n     })\n     .then(response => response.json())\n     .then(data1 => {\n         if (responsestate){\n         document.getElementById('result').innerHTML=String(data1.main.temp) + \"&deg;C: \" + city.toUpperCase() + \", \" + responsestate.toUpperCase()\n         }\n         else{\n             document.getElementById('result').innerHTML=String(data1.main.temp) + \"&deg;C: \" + city.toUpperCase() + \", \" + country.toUpperCase()\n     \n         }\n     \n     \n     })\n      .catch(error => {\n         console.log(\"Error: \" + error.message)\n         document.getElementById('result').innerHTML= \"Incorrect entry\"\n     }\n     )\n  \n}\n\n  const onCityChange = () => {\n    setCity();\n  };\n\n  const onCountryChange = (value) => {\n    setCountry(value);\n  };\n\n  const onStateChange = (value) => {\n    setState(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <InputForm\n        city={city}\n        country={country}\n        state={state}\n        onCityChange={onCityChange}\n        onCountryChange={onCountryChange}\n        onStateChange={onStateChange}\n        onSubmit={loadWeather}\n      />\n      <WeatherResult result={result} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/owaismahmood/Documents/final-react/weather/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\nimport WeatherResult from './WeatherResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [state, setState] = useState('');\n  const [result, setResult] = useState('');\n  const loadWeather = async () => {\n    const apikey = 'd5d0c58cec7185d2e06bf2f5b779e6be';\n    try {\n      if (city == '') {\n        setResult(\"Please enter in a city\");\n        return;\n      }\n\n      // We use this to fetch the latitude and longitude so we can then fetch the weather\n      const responseCity = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&appid=${apikey}`);\n      const data = await responseCity.json();\n      if (data.length == 0) {\n        throw new Error(\"Invalid entry\");\n      }\n      const {\n        lat,\n        lon,\n        state: responseState\n      } = data[0];\n      const responseWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apikey}&units=metric`);\n      const weatherData = await responseWeather.json();\n\n      // For USA we include the state too as some states have cities with the same name so we need to be more specific\n      if (data[0].country == \"US\") {\n        // If we aren't given a country name then we just use the one automatically returned by the API in the result\n        if (country == '') {\n          setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${responseState.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n        } else {\n          // If we are given a country name, we use that in the result.\n          // This is because the API sometimes returns initials of the countru name instead of it's full name\n          setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${responseState.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n        }\n      } else {\n        if (country == '') {\n          setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n        } else {\n          setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${country.toUpperCase()}`);\n        }\n      }\n    } catch (error) {\n      setResult(\"Invalid entry\");\n    }\n  };\n  const onCityChange = value => {\n    setCity(value);\n  };\n  const onCountryChange = value => {\n    setCountry(value);\n  };\n  const onStateChange = value => {\n    setState(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(InputForm, {\n      city: city,\n      country: country,\n      state: state,\n      onCityChange: onCityChange,\n      onCountryChange: onCountryChange,\n      onStateChange: onStateChange,\n      onSubmit: loadWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherResult, {\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LGPqcJalRVl4oZbtHnaBj0dDE7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputForm","WeatherResult","jsxDEV","_jsxDEV","App","_s","city","setCity","country","setCountry","state","setState","result","setResult","loadWeather","apikey","responseCity","fetch","data","json","length","Error","lat","lon","responseState","responseWeather","weatherData","main","temp","name","toUpperCase","error","onCityChange","value","onCountryChange","onStateChange","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owaismahmood/Documents/final-react/weather/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\nimport WeatherResult from './WeatherResult';\n\nconst App = () => {\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [state, setState] = useState('');\n  const [result, setResult] = useState('');\n\n  const loadWeather = async () => {\n    const apikey = 'd5d0c58cec7185d2e06bf2f5b779e6be';\n    try {\n\n      if(city==''){\n        setResult(\"Please enter in a city\")\n        return;\n      }\n\n      // We use this to fetch the latitude and longitude so we can then fetch the weather\n      const responseCity = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&appid=${apikey}`);\n      const data = await responseCity.json();\n\n      if(data.length ==0){\n        throw new Error(\"Invalid entry\");\n      }\n\n      const { lat, lon, state: responseState} = data[0];\n      const responseWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apikey}&units=metric`);\n      const weatherData = await responseWeather.json();\n\n      // For USA we include the state too as some states have cities with the same name so we need to be more specific\n      if (data[0].country == \"US\") {\n        // If we aren't given a country name then we just use the one automatically returned by the API in the result\n        if(country == ''){\n        setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${responseState.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n        }\n        else{\n        // If we are given a country name, we use that in the result.\n        // This is because the API sometimes returns initials of the countru name instead of it's full name\n        setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${responseState.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n        }\n      } \n\n      else {\n        if(country == ''){\n        setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${data[0].country.toUpperCase()}`);\n      }\n      else{\n        setResult(`${weatherData.main.temp}°C: ${data[0].name.toUpperCase()}, ${country.toUpperCase()}`);\n      }\n      }\n      \n    } catch (error) {\n      setResult(\"Invalid entry\");\n    }\n  };\n\n  const onCityChange = (value) => {\n    setCity(value);\n  };\n\n  const onCountryChange = (value) => {\n    setCountry(value);\n  };\n\n  const onStateChange = (value) => {\n    setState(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <InputForm\n        city={city}\n        country={country}\n        state={state}\n        onCityChange={onCityChange}\n        onCountryChange={onCountryChange}\n        onStateChange={onStateChange}\n        onSubmit={loadWeather}\n      />\n      <WeatherResult result={result} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}